# Generated by Django 5.1.7 on 2025-03-26 17:54
from __future__ import annotations

from typing import TYPE_CHECKING

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

if TYPE_CHECKING:
    from django.db.migrations.operations.base import Operation


class Migration(migrations.Migration):
    """Initial migration for the dwui app."""

    initial = True

    dependencies: list[tuple[str, str]] = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations: list[Operation] = [
        migrations.CreateModel(
            name="AdminSettings",
            fields=[
                ("site_id", models.AutoField(help_text="Site ID", primary_key=True, serialize=False)),
                ("site_name", models.TextField(blank=True, default="dwui", help_text="Site Name", max_length=100)),
                ("enable_notifications", models.BooleanField(default=False, help_text="Send notifications to apprise URLs")),
                ("apprise_urls", models.TextField(blank=True, help_text="Newline separated list of apprise URLs")),
            ],
        ),
        migrations.CreateModel(
            name="Architecture",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("arch", models.TextField(blank=True, default="")),
                ("tag", models.TextField(blank=True, default="")),
            ],
        ),
        migrations.CreateModel(
            name="Cap",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("cap_add", models.TextField(blank=True, default="")),
                ("description", models.TextField(blank=True, default="")),
                ("optional", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Changelog",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("description", models.TextField(blank=True, default="")),
            ],
        ),
        migrations.CreateModel(
            name="Custom",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.TextField(blank=True, default="")),
                ("name_compose", models.TextField(blank=True, default="")),
                ("value", models.TextField(blank=True, default="")),
                ("description", models.TextField(blank=True, default="")),
                ("optional", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("path", models.TextField(blank=True, default="")),
                ("host_path", models.TextField(blank=True, default="")),
                ("description", models.TextField(blank=True, default="")),
                ("optional", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="EnvVar",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.TextField(blank=True, default="")),
                ("value", models.TextField(blank=True, default="")),
                ("description", models.TextField(blank=True, default="")),
                ("optional", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Hostname",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("hostname", models.TextField(blank=True, default="")),
                ("description", models.TextField(blank=True, default="")),
                ("optional", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="MACAddress",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("mac_address", models.TextField(blank=True, default="")),
                ("description", models.TextField(blank=True, default="")),
                ("optional", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Port",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("external", models.TextField(blank=True, default="")),
                ("internal", models.TextField(blank=True, default="")),
                ("description", models.TextField(blank=True, default="")),
                ("optional", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="SecurityOpt",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("run_var", models.TextField(blank=True, default="")),
                ("compose_var", models.TextField(blank=True, default="")),
                ("description", models.TextField(blank=True, default="")),
                ("optional", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="TagElement",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("tag", models.TextField(blank=True, default="")),
                ("desc", models.TextField(blank=True, default="")),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Config",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("application_setup", models.TextField(blank=True, default="")),
                ("readonly_supported", models.BooleanField(default=False)),
                ("nonroot_supported", models.BooleanField(default=False)),
                ("networking", models.TextField(blank=True, default="")),
                ("privileged", models.BooleanField(default=False)),
                ("caps", models.ManyToManyField(blank=True, to="dwui.cap")),
                ("custom", models.ManyToManyField(blank=True, to="dwui.custom")),
                ("devices", models.ManyToManyField(blank=True, related_name="config_devices", to="dwui.device")),
                ("volumes", models.ManyToManyField(blank=True, related_name="config_volumes", to="dwui.device")),
                ("env_vars", models.ManyToManyField(blank=True, to="dwui.envvar")),
                ("hostname", models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="dwui.hostname")),
                (
                    "mac_address",
                    models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="dwui.macaddress"),
                ),
                ("ports", models.ManyToManyField(blank=True, to="dwui.port")),
                ("security_opt", models.ManyToManyField(blank=True, to="dwui.securityopt")),
            ],
        ),
        migrations.CreateModel(
            name="Linuxserver",
            fields=[
                ("name", models.TextField(primary_key=True, serialize=False)),
                ("initial_date", models.DateTimeField(blank=True, null=True)),
                ("github_url", models.URLField(blank=True, default="")),
                ("project_url", models.URLField(blank=True, default="")),
                ("project_logo", models.URLField(blank=True, default="")),
                ("description", models.TextField(blank=True, default="")),
                ("version", models.TextField(blank=True, default="")),
                ("version_timestamp", models.DateTimeField(blank=True, null=True)),
                ("category", models.TextField(blank=True, default="")),
                ("stable", models.BooleanField(default=False)),
                ("deprecated", models.BooleanField(default=False)),
                ("stars", models.IntegerField(blank=True, null=True)),
                ("monthly_pulls", models.IntegerField(blank=True, null=True)),
                ("architectures", models.ManyToManyField(blank=True, to="dwui.architecture")),
                ("changelog", models.ManyToManyField(blank=True, to="dwui.changelog")),
                ("config", models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="dwui.config")),
                ("tags", models.ManyToManyField(blank=True, to="dwui.tagelement")),
            ],
        ),
    ]
