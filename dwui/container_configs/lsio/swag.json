{
    "name": "swag",
    "initial_date": "2020-08-03",
    "github_url": "https://github.com/linuxserver/docker-swag",
    "project_url": "https://linuxserver.io",
    "project_logo": "https://github.com/linuxserver/docker-templates/raw/master/linuxserver.io/img/swag.gif",
    "description": "SWAG - Secure Web Application Gateway (formerly known as letsencrypt, no relation to Let's Encrypt\u2122) sets up an Nginx webserver and reverse proxy with php support and a built-in certbot client that automates free SSL server certificate generation and renewal processes (Let's Encrypt and ZeroSSL). It also contains fail2ban for intrusion prevention.",
    "version": "3.3.0-ls373",
    "version_timestamp": "2025-03-29 03:38:29+00:00",
    "category": "Reverse Proxy",
    "stable": true,
    "deprecated": false,
    "stars": 3177,
    "monthly_pulls": 285116,
    "tags": [
        {
            "tag": "latest",
            "desc": "Stable releases"
        }
    ],
    "architectures": [
        {
            "arch": "x86_64",
            "tag": "amd64-latest"
        },
        {
            "arch": "arm64",
            "tag": "arm64v8-latest"
        }
    ],
    "changelog": [
        {
            "date": "2025-01-19",
            "desc": "Add [Auto Reload](https://github.com/linuxserver/docker-mods/tree/swag-auto-reload) functionality to SWAG."
        },
        {
            "date": "2024-12-17",
            "desc": "Rebase to Alpine 3.21."
        },
        {
            "date": "2024-10-21",
            "desc": "Fix naming issue with Dynu plugin. If you are using Dynu, please make sure your credentials are set in /config/dns-conf/dynu.ini and your DNSPLUGIN variable is set to dynu (not dynudns)."
        }
    ],
    "config": {
        "application_setup": "https://github.com/linuxserver/docker-swag?tab=readme-ov-file#application-setup",
        "readonly_supported": true,
        "env_vars": [
            {
                "name": "PUID",
                "value": "1000",
                "desc": "User ID",
                "optional": false
            },
            {
                "name": "PGID",
                "value": "1000",
                "desc": "Group ID",
                "optional": false
            },
            {
                "name": "TZ",
                "value": "Etc/UTC",
                "desc": "Timezone",
                "optional": false
            },
            {
                "name": "URL",
                "value": "example.com",
                "desc": "Top url you have control over (e.g. `example.com` if you own it, or `customsubdomain.example.com` if dynamic dns).",
                "optional": false
            },
            {
                "name": "VALIDATION",
                "value": "http",
                "desc": "Certbot validation method to use, options are `http` or `dns` (`dns` method also requires `DNSPLUGIN` variable set).",
                "optional": false
            },
            {
                "name": "SUBDOMAINS",
                "value": "www,",
                "desc": "Subdomains you'd like the cert to cover (comma separated, no spaces) ie. `www,ftp,cloud`. For a wildcard cert, set this *exactly* to `wildcard` (wildcard cert is available via `dns` validation only)",
                "optional": true
            },
            {
                "name": "CERTPROVIDER",
                "value": "",
                "desc": "Optionally define the cert provider. Set to `zerossl` for ZeroSSL certs (requires existing [ZeroSSL account](https://app.zerossl.com/signup) and the e-mail address entered in `EMAIL` env var). Otherwise defaults to Let's Encrypt.",
                "optional": true
            },
            {
                "name": "DNSPLUGIN",
                "value": "cloudflare",
                "desc": "Required if `VALIDATION` is set to `dns`. Options are `acmedns`, `aliyun`, `azure`, `bunny`, `cloudflare`, `cpanel`, `desec`, `digitalocean`, `directadmin`, `dnsimple`, `dnsmadeeasy`, `dnspod`, `do`, `domeneshop`, `dreamhost`, `duckdns`, `dynu`, `freedns`, `gandi`, `gehirn`, `glesys`, `godaddy`, `google`, `he`, `hetzner`, `infomaniak`, `inwx`, `ionos`, `linode`, `loopia`, `luadns`, `namecheap`, `netcup`, `njalla`, `nsone`, `ovh`, `porkbun`, `rfc2136`, `route53`, `sakuracloud`, `standalone`, `transip`, and `vultr`. Also need to enter the credentials into the corresponding ini (or json for some plugins) file under `/config/dns-conf`.",
                "optional": true
            },
            {
                "name": "PROPAGATION",
                "value": "",
                "desc": "Optionally override (in seconds) the default propagation time for the dns plugins.",
                "optional": true
            },
            {
                "name": "EMAIL",
                "value": "",
                "desc": "Optional e-mail address used for cert expiration notifications (Required for ZeroSSL).",
                "optional": true
            },
            {
                "name": "ONLY_SUBDOMAINS",
                "value": "false",
                "desc": "If you wish to get certs only for certain subdomains, but not the main domain (main domain may be hosted on another machine and cannot be validated), set this to `true`",
                "optional": true
            },
            {
                "name": "EXTRA_DOMAINS",
                "value": "",
                "desc": "Additional fully qualified domain names (comma separated, no spaces) ie. `example.net,subdomain.example.net,*.example.org`",
                "optional": true
            },
            {
                "name": "STAGING",
                "value": "false",
                "desc": "Set to `true` to retrieve certs in staging mode. Rate limits will be much higher, but the resulting cert will not pass the browser's security test. Only to be used for testing purposes.",
                "optional": true
            },
            {
                "name": "DISABLE_F2B",
                "value": "",
                "desc": "Set to `true` to disable the Fail2ban service in the container, if you're already running it elsewhere or using a different IPS.",
                "optional": true
            },
            {
                "name": "SWAG_AUTORELOAD",
                "value": "",
                "desc": "Set to `true` to enable automatic reloading of confs on change without stopping/restarting nginx. Your filesystem must support inotify. This functionality was previously offered [via mod](https://github.com/linuxserver/docker-mods/tree/swag-auto-reload).",
                "optional": true
            },
            {
                "name": "SWAG_AUTORELOAD_WATCHLIST",
                "value": "",
                "desc": "A [pipe](https://en.wikipedia.org/wiki/Vertical_bar)-separated list of additional folders for auto reload to watch in addition to `/config/nginx`",
                "optional": true
            }
        ],
        "volumes": [
            {
                "path": "/config",
                "host_path": "/path/to/swag/config",
                "desc": "Persistent config files",
                "optional": false
            }
        ],
        "ports": [
            {
                "external": "443",
                "internal": "443",
                "desc": "HTTPS port",
                "optional": false
            },
            {
                "external": "80",
                "internal": "80",
                "desc": "HTTP port (required for HTTP validation and HTTP -> HTTPS redirect)",
                "optional": true
            }
        ],
        "caps": [
            {
                "cap_add": "NET_ADMIN",
                "desc": "Required for fail2Ban to be able to modify iptables rules.",
                "optional": false
            }
        ]
    }
}
